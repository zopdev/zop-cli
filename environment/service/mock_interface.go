// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go
//
// Generated by this command:
//
//	mockgen -source=interface.go -destination=mock_interface.go -package=service
//

// Package service is a generated GoMock package.
package service

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	gofr "gofr.dev/pkg/gofr"
	service "zop.dev/cli/zop/application/service"
)

// MockApplicationGetter is a mock of ApplicationGetter interface.
type MockApplicationGetter struct {
	ctrl     *gomock.Controller
	recorder *MockApplicationGetterMockRecorder
	isgomock struct{}
}

// MockApplicationGetterMockRecorder is the mock recorder for MockApplicationGetter.
type MockApplicationGetterMockRecorder struct {
	mock *MockApplicationGetter
}

// NewMockApplicationGetter creates a new mock instance.
func NewMockApplicationGetter(ctrl *gomock.Controller) *MockApplicationGetter {
	mock := &MockApplicationGetter{ctrl: ctrl}
	mock.recorder = &MockApplicationGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApplicationGetter) EXPECT() *MockApplicationGetterMockRecorder {
	return m.recorder
}

// GetApplications mocks base method.
func (m *MockApplicationGetter) GetApplications(ctx *gofr.Context) ([]service.Application, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApplications", ctx)
	ret0, _ := ret[0].([]service.Application)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApplications indicates an expected call of GetApplications.
func (mr *MockApplicationGetterMockRecorder) GetApplications(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApplications", reflect.TypeOf((*MockApplicationGetter)(nil).GetApplications), ctx)
}
