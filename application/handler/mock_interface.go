// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go
//
// Generated by this command:
//
//	mockgen -source=interface.go -destination=mock_interface.go -package=handler
//

// Package handler is a generated GoMock package.
package handler

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	gofr "gofr.dev/pkg/gofr"
)

// MockApplicationAdder is a mock of ApplicationAdder interface.
type MockApplicationAdder struct {
	ctrl     *gomock.Controller
	recorder *MockApplicationAdderMockRecorder
	isgomock struct{}
}

// MockApplicationAdderMockRecorder is the mock recorder for MockApplicationAdder.
type MockApplicationAdderMockRecorder struct {
	mock *MockApplicationAdder
}

// NewMockApplicationAdder creates a new mock instance.
func NewMockApplicationAdder(ctrl *gomock.Controller) *MockApplicationAdder {
	mock := &MockApplicationAdder{ctrl: ctrl}
	mock.recorder = &MockApplicationAdderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApplicationAdder) EXPECT() *MockApplicationAdderMockRecorder {
	return m.recorder
}

// AddApplication mocks base method.
func (m *MockApplicationAdder) AddApplication(ctx *gofr.Context, name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddApplication", ctx, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddApplication indicates an expected call of AddApplication.
func (mr *MockApplicationAdderMockRecorder) AddApplication(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddApplication", reflect.TypeOf((*MockApplicationAdder)(nil).AddApplication), ctx, name)
}
